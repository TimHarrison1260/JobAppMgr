using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Infrastructure.Interfaces;
using Core.Model;

namespace Infrastructure.Data
{
    /// <summary>
    /// Database Context, Entity Framework, that provides access 
    /// to the SQL server database supporting this application
    /// </summary>
    public class JobApplicationContext : DbContext, IUnitOfWork
    {
        /// <summary>
        /// Ctor: inject Connection String
        /// </summary>
        public JobApplicationContext()
            : base("JobApplicationContext")
        {
            //  Set the database to be dropped and recreated only when the model changes.
            Database.SetInitializer(new DropCreateDatabaseIfModelChanges<JobApplicationContext>());

            //  Switch off Lazy loading
            this.Configuration.LazyLoadingEnabled = false;
        }

        /// <summary>
        /// Provides access to the JobApplication Entity
        /// </summary>
        public IDbSet<JobApplication> JobApplications { get; set; }

        /// <summary>
        /// Provides access to the Event Types object
        /// </summary>
        public IDbSet<EventType> EventTypes { get; set; }

        /// <summary>
        /// Provides access to the Events objects
        /// </summary>
        public IDbSet<Event> Events { get; set; }

        /// <summary>
        /// Provides access to the Status object
        /// </summary>
        public IDbSet<Status> Statuses { get; set; }

        /// <summary>
        /// Provides acces to the Company Entities
        /// </summary>
        public IDbSet<Company> Companies { get; set; }

        /// <summary>
        /// Provides access to the Agency Entities
        /// </summary>
        public IDbSet<Agency> Agencies { get; set; }

        /// <summary>
        /// Provides access to the Contact Entites
        /// </summary>
        public IDbSet<Contact> Contacts { get; set; }


        /// <summary>
        /// OnModelCreateing: Override this to allow configuration of 
        /// underlying database with self references on EventTypes
        /// which Entity Framework cannot configure automatically
        /// by convention.
        /// </summary>
        /// <param name="modelBuilder">Modelbuilder instance</param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //  Configure the Data Model
            base.OnModelCreating(modelBuilder);

            //  This is by convention, not strictly required here
            modelBuilder.Entity<JobApplication>()
                .HasKey(j => j.Id);
            //  Ensures the Id is generated by the database.
            modelBuilder.Entity<JobApplication>()
                .Property(j => j.Id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            //  Stop the IDENTITY being set on the EntityType.Id
            modelBuilder.Entity<EventType>()
                .Property(t => t.Id)
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);

            //  Create reference to NextType; Self reference.  EF cannot automate this type of reference
            modelBuilder.Entity<EventType>()
                .HasOptional(t => t.NextType)
                .WithMany()
                .HasForeignKey(k => k.NextId);
            //  Create reference to PreviousType: Self reference:  EF .......".........
            modelBuilder.Entity<EventType>()
                .HasOptional(t => t.PreviousType)
                .WithMany()
                .HasForeignKey(k => k.PrevId);

            //  Configure Discriminator for Company and Agency table. configure as TPH.
            modelBuilder.Entity<Organisation>()
                .Map<Company>(c => c.Requires("Type")
                    .HasValue("C"))
                .Map<Agency>(a => a.Requires("Type")
                    .HasValue("A"));
        }
    }
}